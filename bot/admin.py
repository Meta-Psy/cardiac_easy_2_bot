import os
import json
import asyncio
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
import pandas as pd

from dotenv import load_dotenv

load_dotenv()
admin_router = Router()

class AdminStates(StatesGroup):
    waiting_password = State()
    waiting_broadcast_text = State()
    waiting_manual_ids = State()
    waiting_import_file = State()

# –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD", "")

def get_admin_keyboard():
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∫–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_export")],
        [InlineKeyboardButton(text="üì§ –†–ê–°–°–´–õ–ö–ò", callback_data="admin_broadcast_menu")],
        [InlineKeyboardButton(text="üíæ –ò–º–ø–æ—Ä—Ç –ë–î", callback_data="admin_import_menu")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ", callback_data="admin_clean")],
        [InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏", callback_data="admin_logout")]
    ])
    return keyboard

def get_broadcast_menu():
    """–ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –ë–î", callback_data="broadcast_from_db")],
        [InlineKeyboardButton(text="üìã –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ ID", callback_data="broadcast_manual_ids")],
        [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast_test")],
        [InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="broadcast_history")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    return keyboard

def get_db_filter_menu():
    """–ú–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ –ë–î"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="db_filter_all")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏–≤—à–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É", callback_data="db_filter_completed")],
        [InlineKeyboardButton(text="‚è≥ –ù–µ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–º", callback_data="db_filter_uncompleted")],
        [InlineKeyboardButton(text="üìù –ü—Ä–æ—à–µ–¥—à–∏–º –æ–ø—Ä–æ—Å", callback_data="db_filter_survey")],
        [InlineKeyboardButton(text="üß™ –ü—Ä–æ—à–µ–¥—à–∏–º —Ç–µ—Å—Ç—ã", callback_data="db_filter_tests")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_broadcast_menu")]
    ])
    return keyboard

# =========================== –û–°–ù–û–í–ù–ê–Ø –ê–î–ú–ò–ù–ö–ê ===========================

@admin_router.message(Command("admin"))
async def admin_panel(message: Message, state: FSMContext, is_admin: bool = False):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å"""
    if not is_admin:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    admin_session = await state.get_data()
    if admin_session.get('admin_authenticated'):
        await show_admin_panel(message)
    else:
        await request_admin_password(message, state)

async def request_admin_password(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è"""
    text = """üîê <b>–î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏</b>

–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"""
    
    await message.answer(text, parse_mode="HTML")
    await state.set_state(AdminStates.waiting_password)

@admin_router.message(AdminStates.waiting_password)
async def handle_admin_password(message: Message, state: FSMContext, is_admin: bool = False):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è"""
    if not is_admin:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await state.clear()
        return
    
    password = message.text.strip()
    
    try:
        await message.delete()
    except:
        pass
    
    if str(password) == str(ADMIN_PASSWORD):
        await state.update_data(admin_authenticated=True)
        text = "‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω!"
        sent_message = await message.answer(text)
        await asyncio.sleep(1)
        await show_admin_panel(sent_message)
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def show_admin_panel(message: Message):
    """–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∫–∏"""
    text = """üîß <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å v2.0</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
üì• <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</b> - –≤—ã–≥—Ä—É–∑–∫–∞ –ë–î –≤ Excel
üì§ <b>–†–ê–°–°–´–õ–ö–ò</b> - —Å–∏—Å—Ç–µ–º–∞ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
üíæ <b>–ò–º–ø–æ—Ä—Ç –ë–î</b> - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ Excel
üóë <b>–û—á–∏—Å—Ç–∫–∞</b> - —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
üö™ <b>–í—ã–π—Ç–∏</b> - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
    
    keyboard = get_admin_keyboard()
    try:
        await message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    except:
        await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

# =========================== –°–ò–°–¢–ï–ú–ê –†–ê–°–°–´–õ–û–ö ===========================

@admin_router.callback_query(F.data == "admin_broadcast_menu")
async def broadcast_menu(callback: CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫"""
    from database import admin_get_stats
    if not await check_admin_auth(callback, state, is_admin):
        return
    
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    try:
        stats = await admin_get_stats()
        
        text = f"""üì§ <b>–°–ò–°–¢–ï–ú–ê –†–ê–°–°–´–õ–û–ö</b>

üìä <b>–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>
‚Ä¢ –í—Å–µ–≥–æ: {stats['total_users']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É: {stats['completed_diagnostic']}
‚Ä¢ –ù–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏: {stats['total_users'] - stats['completed_diagnostic']}
‚Ä¢ –ü—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å: {stats['completed_surveys']}
‚Ä¢ –ü—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç—ã: {stats['completed_tests']}

<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:</b>

üì§ <b>–ü–æ –ë–î</b> - —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –±–∞–∑—ã
üìã <b>–ü–æ ID</b> - —Ä–∞—Å—Å—ã–ª–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
üß™ <b>–¢–µ—Å—Ç</b> - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º
üìä <b>–ò—Å—Ç–æ—Ä–∏—è</b> - –ª–æ–≥–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
        
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_broadcast_menu())
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é: {e}")

@admin_router.callback_query(F.data == "broadcast_from_db")
async def broadcast_db_filter(callback: CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–í—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ –ë–î"""
    if not await check_admin_auth(callback, state, is_admin):
        return
    
    await callback.answer()
    
    text = """üì§ <b>–†–ê–°–°–´–õ–ö–ê –ü–û –ë–ê–ó–ï –î–ê–ù–ù–´–•</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:

üë• <b>–í—Å–µ–º</b> - –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚úÖ <b>–ó–∞–≤–µ—Ä—à–∏–≤—à–∏–º</b> - —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
‚è≥ <b>–ù–µ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–º</b> - –Ω–µ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
üìù <b>–ü—Ä–æ—à–µ–¥—à–∏–º –æ–ø—Ä–æ—Å</b> - —Ç–æ–ª—å–∫–æ –ø—Ä–æ—à–µ–¥—à–∏–º –æ–ø—Ä–æ—Å
üß™ <b>–ü—Ä–æ—à–µ–¥—à–∏–º —Ç–µ—Å—Ç—ã</b> - —Ç–æ–ª—å–∫–æ –ø—Ä–æ—à–µ–¥—à–∏–º —Ç–µ—Å—Ç—ã"""
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_db_filter_menu())

@admin_router.callback_query(F.data.startswith("db_filter_"))
async def request_broadcast_text(callback: CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–ó–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not await check_admin_auth(callback, state, is_admin):
        return
    
    await callback.answer()
    
    filter_type = callback.data.replace("db_filter_", "")
    await state.update_data(broadcast_filter=filter_type)
    
    filter_names = {
        "all": "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
        "completed": "–∑–∞–≤–µ—Ä—à–∏–≤—à–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É",
        "uncompleted": "–Ω–µ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É", 
        "survey": "–ø—Ä–æ—à–µ–¥—à–∏–º –æ–ø—Ä–æ—Å",
        "tests": "–ø—Ä–æ—à–µ–¥—à–∏–º —Ç–µ—Å—Ç—ã"
    }
    
    text = f"""‚úçÔ∏è <b>–¢–ï–ö–°–¢ –†–ê–°–°–´–õ–ö–ò</b>

<b>–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:</b> {filter_names.get(filter_type, filter_type)}

–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Markdown —Ä–∞–∑–º–µ—Ç–∫–∞:</b>
‚Ä¢ **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**
‚Ä¢ *–∫—É—Ä—Å–∏–≤*
‚Ä¢ [—Å—Å—ã–ª–∫–∞](https://example.com)
‚Ä¢ `–∫–æ–¥`

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:"""
    
    await callback.message.edit_text(text, parse_mode="HTML")
    await state.set_state(AdminStates.waiting_broadcast_text)

@admin_router.callback_query(F.data == "broadcast_manual_ids")
async def request_manual_ids(callback: CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–ó–∞–ø—Ä–æ—Å —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ID"""
    if not await check_admin_auth(callback, state, is_admin):
        return
    
    await callback.answer()
    
    text = """üìã <b>–†–ê–°–°–´–õ–ö–ê –ü–û ID</b>

–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.

<b>–ü—Ä–∏–º–µ—Ä:</b>
123456789, 987654321, 555444333

<b>–§–æ—Ä–º–∞—Ç:</b>
‚Ä¢ ID —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è –∑–∞–ø—è—Ç—ã–º–∏
‚Ä¢ –ü—Ä–æ–±–µ–ª—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è
‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã

–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ ID:"""
    
    await callback.message.edit_text(text, parse_mode="HTML")
    await state.update_data(broadcast_filter="manual")
    await state.set_state(AdminStates.waiting_manual_ids)

@admin_router.message(AdminStates.waiting_manual_ids)
async def handle_manual_ids(message: Message, state: FSMContext, is_admin: bool = False):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ID"""
    if not is_admin:
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        await state.clear()
        return
    
    ids_text = message.text.strip()
    
    # –ü–∞—Ä—Å–∏–º ID
    try:
        id_list = []
        for id_str in ids_text.split(','):
            id_str = id_str.strip()
            if id_str.isdigit():
                id_list.append(int(id_str))
        
        if not id_list:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        await state.update_data(manual_ids=id_list)
        
        text = f"""‚úÖ <b>ID –ø—Ä–∏–Ω—è—Ç—ã</b>

<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π ({len(id_list)} ID):</b>
{', '.join(map(str, id_list[:10]))}{'...' if len(id_list) > 10 else ''}

–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:"""
        
        await message.answer(text, parse_mode="HTML")
        await state.set_state(AdminStates.waiting_broadcast_text)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ID: {e}")

@admin_router.message(AdminStates.waiting_broadcast_text)
async def handle_broadcast_text(message: Message, state: FSMContext, is_admin: bool = False):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin:
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        await state.clear()
        return
    
    broadcast_text = message.text
    state_data = await state.get_data()
    
    filter_type = state_data.get('broadcast_filter')
    manual_ids = state_data.get('manual_ids', [])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
    if filter_type == "manual":
        target_info = f"–†—É—á–Ω–æ–π —Å–ø–∏—Å–æ–∫ ({len(manual_ids)} ID)"
    else:
        target_info = {
            "all": "–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
            "completed": "–ó–∞–≤–µ—Ä—à–∏–≤—à–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É",
            "uncompleted": "–ù–µ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É",
            "survey": "–ü—Ä–æ—à–µ–¥—à–∏–º –æ–ø—Ä–æ—Å",
            "tests": "–ü—Ä–æ—à–µ–¥—à–∏–º —Ç–µ—Å—Ç—ã"
        }.get(filter_type, filter_type)
    
    preview_text = f"""üìã <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –†–ê–°–°–´–õ–ö–ò</b>

<b>–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:</b> {target_info}

<b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b>
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
{broadcast_text}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–¢–ü–†–ê–í–ò–¢–¨", callback_data="confirm_broadcast")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_broadcast_menu")]
    ])
    
    await state.update_data(broadcast_text=broadcast_text)
    await message.answer(preview_text, parse_mode="HTML", reply_markup=keyboard)

@admin_router.callback_query(F.data == "confirm_broadcast")
async def execute_broadcast(callback: CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not await check_admin_auth(callback, state, is_admin):
        return
    
    await callback.answer()
    await callback.message.edit_text("‚è≥ –í—ã–ø–æ–ª–Ω—è—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    try:
        state_data = await state.get_data()
        broadcast_text = state_data.get('broadcast_text')
        filter_type = state_data.get('broadcast_filter')
        manual_ids = state_data.get('manual_ids', [])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        if filter_type == "manual":
            target_ids = manual_ids
        else:
            target_ids = await get_user_ids_by_filter(filter_type)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        result = await send_broadcast_to_ids(callback.bot, target_ids, broadcast_text)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        success_rate = (result['sent'] / result['total'] * 100) if result['total'] > 0 else 0
        
        result_text = f"""‚úÖ <b>–†–ê–°–°–´–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {result['total']}
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result['sent']}
‚Ä¢ –û—à–∏–±–æ–∫: {result['errors']}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%

üïê –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {datetime.now().strftime('%H:%M:%S')}

{result.get('details', '')}"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast_menu")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]
        ])
        
        await callback.message.edit_text(result_text, parse_mode="HTML", reply_markup=keyboard)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        await state.update_data(admin_authenticated=True)
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

# =========================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===========================

async def get_user_ids_by_filter(filter_type: str) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ñ–∏–ª—å—Ç—Ä—É"""
    from database import SessionLocal, User
    def _get_ids():
        db = SessionLocal()
        try:
            if filter_type == "all":
                users = db.query(User).filter(User.registration_completed == True).all()
            elif filter_type == "completed":
                users = db.query(User).filter(User.completed_diagnostic == True).all()
            elif filter_type == "uncompleted":
                users = db.query(User).filter(
                    User.registration_completed == True,
                    User.completed_diagnostic == False
                ).all()
            elif filter_type == "survey":
                users = db.query(User).filter(User.survey_completed == True).all()
            elif filter_type == "tests":
                users = db.query(User).filter(User.tests_completed == True).all()
            else:
                return []
            
            return [user.telegram_id for user in users]
        finally:
            db.close()
    
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(None, _get_ids)

async def send_broadcast_to_ids(bot, target_ids: list, message_text: str) -> dict:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ —Å–ø–∏—Å–∫—É ID"""
    total = len(target_ids)
    sent = 0
    errors = 0
    error_details = []
    
    for user_id in target_ids:
        try:
            await bot.send_message(user_id, message_text, parse_mode="Markdown")
            sent += 1
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
            await asyncio.sleep(0.05)
        except Exception as e:
            errors += 1
            error_details.append(f"ID {user_id}: {str(e)[:50]}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞
    details = ""
    if error_details and len(error_details) <= 5:
        details = "\n\nüîç <b>–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:</b>\n" + "\n".join(error_details)
    elif error_details:
        details = f"\n\nüîç <b>–û—à–∏–±–∫–∏:</b> {len(error_details)} (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 5)\n" + "\n".join(error_details[:5])
    
    return {
        'total': total,
        'sent': sent,
        'errors': errors,
        'details': details
    }

@admin_router.callback_query(F.data == "broadcast_test")
async def test_broadcast(callback: CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω–∞–º"""
    if not await check_admin_auth(callback, state, is_admin):
        return
    
    await callback.answer()
    await callback.message.edit_text("üß™ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    
    try:
        admin_ids_str = os.getenv("ADMIN_IDS", "")
        admin_ids = [int(x.strip()) for x in admin_ids_str.split(",") if x.strip()]
        
        test_message = f"""üß™ **–¢–ï–°–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï**

–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!

–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã."""
        
        result = await send_broadcast_to_ids(callback.bot, admin_ids, test_message)
        
        result_text = f"""‚úÖ <b>–¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù</b>

üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∞–º: {result['sent']}/{result['total']}
‚ùå –û—à–∏–±–æ–∫: {result['errors']}

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_broadcast_menu")]
        ])
        
        await callback.message.edit_text(result_text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")

# =========================== –ü–†–û–í–ï–†–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ===========================

async def check_admin_auth(callback: CallbackQuery, state: FSMContext, is_admin: bool) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞"""
    from database import admin_get_stats
    if not is_admin:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return False
    
    admin_session = await state.get_data()
    if not admin_session.get('admin_authenticated'):
        await callback.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å", show_alert=True)
        await request_admin_password(callback.message, state)
        return False
    
    return True

# =========================== –ù–ê–í–ò–ì–ê–¶–ò–Ø ===========================

@admin_router.callback_query(F.data == "admin_back")
async def back_to_admin(callback: CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    if not await check_admin_auth(callback, state, is_admin):
        return
    
    await callback.answer()
    await show_admin_panel(callback.message)

@admin_router.callback_query(F.data == "admin_logout")
async def admin_logout(callback: CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏"""
    if not is_admin:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.answer()
    await state.clear()
    
    text = """üëã <b>–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏</b>

–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin"""
    
    await callback.message.edit_text(text, parse_mode="HTML")

# =========================== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –§–£–ù–ö–¶–ò–ò ===========================

@admin_router.callback_query(F.data == "admin_stats")
async def show_stats(callback: CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    from database import admin_get_stats
    if not await check_admin_auth(callback, state, is_admin):
        return
    
    await callback.answer()
    
    try:
        stats = await admin_get_stats()
        
        text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {stats['total_users']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: {stats['completed_registration']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø—Ä–æ—Å: {stats['completed_surveys']}
‚Ä¢ –ü—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç—ã: {stats['completed_tests']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É: {stats['completed_diagnostic']}

üìà <b>–ö–æ–Ω–≤–µ—Ä—Å–∏—è:</b>
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {stats['completed_registration']/max(stats['total_users'], 1)*100:.1f}%
‚Ä¢ –û–ø—Ä–æ—Å: {stats['completed_surveys']/max(stats['total_users'], 1)*100:.1f}%
‚Ä¢ –¢–µ—Å—Ç—ã: {stats['completed_tests']/max(stats['total_users'], 1)*100:.1f}%
‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: {stats['completed_diagnostic']/max(stats['total_users'], 1)*100:.1f}%"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# =========================== –°–ò–°–¢–ï–ú–ê –ò–ú–ü–û–†–¢–ê –ë–î ===========================

@admin_router.callback_query(F.data == "admin_import_menu")
async def import_menu(callback: CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–ú–µ–Ω—é –∏–º–ø–æ—Ä—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if not await check_admin_auth(callback, state, is_admin):
        return
    
    await callback.answer()
    
    text = """üíæ <b>–ò–ú–ü–û–†–¢ –ë–ê–ó–´ –î–ê–ù–ù–´–•</b>

‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –ò–º–ø–æ—Ä—Ç –∑–∞–º–µ–Ω–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ!

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>
‚Ä¢ Excel —Ñ–∞–π–ª—ã (.xlsx) –∏–∑ —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–æ—Ç–∞
‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏—Å—Ç "–í—Å–µ –¥–∞–Ω–Ω—ã–µ" –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã

<b>–ü—Ä–æ—Ü–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞:</b>
1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª
2Ô∏è‚É£ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É
3Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–º–ø–æ—Ä—Ç
4Ô∏è‚É£ –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã

<b>–ß—Ç–æ –±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:</b>
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –∏—Ö –¥–∞–Ω–Ω—ã–µ
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–æ–≤
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
‚Ä¢ –°—Ç–∞—Ç—É—Å—ã –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è

üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞:"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="import_help")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await state.set_state(AdminStates.waiting_import_file)

@admin_router.callback_query(F.data == "import_help")
async def import_help(callback: CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–ü–æ–º–æ—â—å –ø–æ –∏–º–ø–æ—Ä—Ç—É"""
    if not await check_admin_auth(callback, state, is_admin):
        return
    
    await callback.answer()
    
    text = """üìã <b>–ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ò–ú–ü–û–†–¢–£</b>

<b>1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Excel —Ñ–∞–π–ª –∏–∑ —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–æ—Ç–∞
‚Ä¢ –ì–ª–∞–≤–Ω—ã–π –ª–∏—Å—Ç "–í—Å–µ –¥–∞–Ω–Ω—ã–µ" —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ –ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–ª–æ–Ω–æ–∫

<b>2. –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:</b>
‚Ä¢ telegram_id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
‚Ä¢ name - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ email - email (–º–æ–∂–Ω–æ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
‚Ä¢ phone - —Ç–µ–ª–µ—Ñ–æ–Ω (–º–æ–∂–Ω–æ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)

<b>3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:</b>
‚Ä¢ –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ –æ–ø—Ä–æ—Å–æ–≤ (age, gender, location –∏ —Ç.–¥.)
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ (hads_anxiety_score, burns_score –∏ —Ç.–¥.)
‚Ä¢ –°—Ç–∞—Ç—É—Å—ã (survey_completed, tests_completed –∏ —Ç.–¥.)

<b>4. –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:</b>
‚Ä¢ –î–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM:SS
‚Ä¢ –ë—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è: True/False –∏–ª–∏ 1/0
‚Ä¢ –ß–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
‚Ä¢ JSON –ø–æ–ª—è –∫–∞–∫ —Ç–µ–∫—Å—Ç (–±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)

<b>5. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –°–æ–∑–¥–∞–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–∫–∞—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –ø–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –∏–º–ø–æ—Ä—Ç—É", callback_data="admin_import_menu")]
    ])
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)

@admin_router.message(AdminStates.waiting_import_file)
async def handle_import_file(message: Message, state: FSMContext, is_admin: bool = False):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞"""
    if not is_admin:
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        await state.clear()
        return
    
    if not message.document:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª (.xlsx)")
        return
    
    if not message.document.file_name.endswith('.xlsx'):
        await message.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã Excel (.xlsx)")
        return
    
    await message.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await message.bot.get_file(message.document.file_id)
        file_path = f"import_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        await message.bot.download_file(file.file_path, file_path)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
        analysis = await analyze_import_file(file_path)
        
        if not analysis['success']:
            os.remove(file_path)
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {analysis['error']}")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(import_file_path=file_path, import_analysis=analysis)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∏–º–ø–æ—Ä—Ç–∞
        preview_text = f"""üìä <b>–ê–ù–ê–õ–ò–ó –§–ê–ô–õ–ê –ó–ê–í–ï–†–®–ï–ù</b>

<b>üìÅ –§–∞–π–ª:</b> {message.document.file_name}
<b>üìè –†–∞–∑–º–µ—Ä:</b> {message.document.file_size / 1024:.1f} –ö–ë

<b>üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ª–∏—Å—Ç—ã:</b>
{chr(10).join([f"‚Ä¢ {sheet}" for sheet in analysis['sheets']])}

<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:</b>
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {analysis['users_count']}
‚Ä¢ –û–ø—Ä–æ—Å–æ–≤: {analysis['surveys_count']}
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤: {analysis['tests_count']}

<b>‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:</b> {analysis['valid_records']}
<b>‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:</b> {analysis['problematic_records']}

{analysis.get('warnings', '')}

‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã!"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–û–î–¢–í–ï–†–î–ò–¢–¨ –ò–ú–ü–û–†–¢", callback_data="confirm_import")],
            [InlineKeyboardButton(text="üìã –î–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞", callback_data="import_details")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_import")]
        ])
        
        await message.answer(preview_text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        if 'file_path' in locals() and os.path.exists(file_path):
            os.remove(file_path)

@admin_router.callback_query(F.data == "import_details")
async def show_import_details(callback: CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–º–ø–æ—Ä—Ç–∞"""
    if not await check_admin_auth(callback, state, is_admin):
        return
    
    await callback.answer()
    
    state_data = await state.get_data()
    analysis = state_data.get('import_analysis', {})
    
    details_text = f"""üîç <b>–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ò–ú–ü–û–†–¢–ê</b>

<b>üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:</b>
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫: {len(analysis.get('columns', []))}
‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {'‚úÖ' if analysis.get('has_required_columns') else '‚ùå'}

<b>üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:</b>
‚Ä¢ –°—Ç—Ä–æ–∫ –≤ "–í—Å–µ –¥–∞–Ω–Ω—ã–µ": {analysis.get('all_data_rows', 0)}
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö telegram_id: {analysis.get('unique_telegram_ids', 0)}
‚Ä¢ –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {analysis.get('duplicate_ids', 0)}

<b>üìà –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:</b>
‚Ä¢ –ü–æ–ª–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {analysis.get('complete_records', 0)}
‚Ä¢ –ß–∞—Å—Ç–∏—á–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: {analysis.get('partial_records', 0)}
‚Ä¢ –ü—É—Å—Ç—ã—Ö/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö: {analysis.get('empty_records', 0)}

<b>üîó –°–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:</b>
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –æ–ø—Ä–æ—Å–∞–º–∏: {analysis.get('users_with_surveys', 0)}
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ç–µ—Å—Ç–∞–º–∏: {analysis.get('users_with_tests', 0)}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {analysis.get('completed_diagnostics', 0)}

<b>‚ö†Ô∏è –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:</b>
{chr(10).join([f"‚Ä¢ {issue}" for issue in analysis.get('issues', [])])}

<b>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
{chr(10).join([f"‚Ä¢ {rec}" for rec in analysis.get('recommendations', [])])}"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–º–ø–æ—Ä—Ç", callback_data="confirm_import")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_import_menu")]
    ])
    
    await callback.message.edit_text(details_text, parse_mode="HTML", reply_markup=keyboard)

@admin_router.callback_query(F.data == "confirm_import")
async def execute_import(callback: CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    if not await check_admin_auth(callback, state, is_admin):
        return
    
    await callback.answer()
    await callback.message.edit_text("‚è≥ –í—ã–ø–æ–ª–Ω—è—é –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        state_data = await state.get_data()
        file_path = state_data.get('import_file_path')
        
        if not file_path or not os.path.exists(file_path):
            await callback.message.edit_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_path = await create_database_backup()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç
        import_result = await perform_database_import(file_path)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(file_path)
        
        if import_result['success']:
            result_text = f"""‚úÖ <b>–ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û</b>

<b>üìä –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:</b>
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {import_result['imported_users']}
‚Ä¢ –û–ø—Ä–æ—Å–æ–≤: {import_result['imported_surveys']}
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤: {import_result['imported_tests']}

<b>üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:</b> {import_result['updated_records']}
<b>üÜï –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö:</b> {import_result['created_records']}

<b>üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è:</b> {backup_path}

<b>‚è± –í—Ä–µ–º—è –∏–º–ø–æ—Ä—Ç–∞:</b> {import_result['import_time']:.2f} —Å–µ–∫

–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ Excel —Ñ–∞–π–ª–∞!"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="admin_stats")],
                [InlineKeyboardButton(text="üì§ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast_test")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]
            ])
        else:
            result_text = f"""‚ùå <b>–û–®–ò–ë–ö–ê –ò–ú–ü–û–†–¢–ê</b>

<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {import_result['error']}

<b>üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞:</b> {backup_path}
–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞.

<b>üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏–º–ø–æ—Ä—Ç—É"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="import_help")],
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="admin_import_menu")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]
            ])
        
        await callback.message.edit_text(result_text, parse_mode="HTML", reply_markup=keyboard)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        await state.update_data(admin_authenticated=True)
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")

@admin_router.callback_query(F.data == "cancel_import")
async def cancel_import(callback: CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–û—Ç–º–µ–Ω–∞ –∏–º–ø–æ—Ä—Ç–∞"""
    if not await check_admin_auth(callback, state, is_admin):
        return
    
    await callback.answer()
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    state_data = await state.get_data()
    file_path = state_data.get('import_file_path')
    if file_path and os.path.exists(file_path):
        os.remove(file_path)
    
    await callback.message.edit_text("‚ùå –ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω. –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω—ã.")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω–∫—É
    await asyncio.sleep(2)
    await show_admin_panel(callback.message)

# =========================== –§–£–ù–ö–¶–ò–ò –ò–ú–ü–û–†–¢–ê ===========================

async def analyze_import_file(file_path: str) -> dict:
    """–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞"""
    def _analyze():
        try:
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            excel_file = pd.ExcelFile(file_path)
            sheets = excel_file.sheet_names
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª–∏—Å—Ç "–í—Å–µ –¥–∞–Ω–Ω—ã–µ" –∏–ª–∏ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
            main_sheet = None
            if "–í—Å–µ –¥–∞–Ω–Ω—ã–µ" in sheets:
                main_sheet = "–í—Å–µ –¥–∞–Ω–Ω—ã–µ"
            elif "All data" in sheets:
                main_sheet = "All data"
            elif len(sheets) > 0:
                main_sheet = sheets[0]
            
            if not main_sheet:
                return {"success": False, "error": "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ª–∏—Å—Ç—ã"}
            
            # –ß–∏—Ç–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            df = pd.read_excel(file_path, sheet_name=main_sheet)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            columns = list(df.columns)
            required_columns = ['telegram_id', 'name', 'email', 'phone']
            has_required = all(col in columns for col in required_columns)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            total_rows = len(df)
            unique_telegram_ids = df['telegram_id'].nunique() if 'telegram_id' in columns else 0
            duplicate_ids = total_rows - unique_telegram_ids
            
            # –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–æ —Ç–∏–ø–∞–º
            users_count = len(df[df['telegram_id'].notna()]) if 'telegram_id' in columns else 0
            surveys_count = len(df[df['age'].notna()]) if 'age' in columns else 0
            tests_count = len(df[df['hads_anxiety_score'].notna()]) if 'hads_anxiety_score' in columns else 0
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
            complete_records = 0
            partial_records = 0
            empty_records = 0
            
            for _, row in df.iterrows():
                filled_cols = sum(1 for val in row if pd.notna(val) and val != '')
                if filled_cols >= len(required_columns):
                    complete_records += 1
                elif filled_cols > 0:
                    partial_records += 1
                else:
                    empty_records += 1
            
            # –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º
            issues = []
            recommendations = []
            
            if not has_required:
                missing = [col for col in required_columns if col not in columns]
                issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing)}")
                recommendations.append("–î–æ–±–∞–≤—å—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ñ–∞–π–ª")
            
            if duplicate_ids > 0:
                issues.append(f"–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã telegram_id: {duplicate_ids}")
                recommendations.append("–£–¥–∞–ª–∏—Ç–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏")
            
            if empty_records > total_rows * 0.1:  # –ë–æ–ª–µ–µ 10% –ø—É—Å—Ç—ã—Ö
                issues.append(f"–ú–Ω–æ–≥–æ –ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π: {empty_records}")
                recommendations.append("–û—á–∏—Å—Ç–∏—Ç–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            users_with_surveys = len(df[(df['telegram_id'].notna()) & (df['age'].notna())]) if all(col in columns for col in ['telegram_id', 'age']) else 0
            users_with_tests = len(df[(df['telegram_id'].notna()) & (df['hads_anxiety_score'].notna())]) if all(col in columns for col in ['telegram_id', 'hads_anxiety_score']) else 0
            completed_diagnostics = len(df[df['completed_diagnostic'] == True]) if 'completed_diagnostic' in columns else 0
            
            warnings = ""
            if issues:
                warnings = f"\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b>\n{chr(10).join([f'‚Ä¢ {issue}' for issue in issues[:3]])}"
            
            return {
                "success": True,
                "sheets": sheets,
                "main_sheet": main_sheet,
                "columns": columns,
                "has_required_columns": has_required,
                "users_count": users_count,
                "surveys_count": surveys_count,
                "tests_count": tests_count,
                "all_data_rows": total_rows,
                "unique_telegram_ids": unique_telegram_ids,
                "duplicate_ids": duplicate_ids,
                "complete_records": complete_records,
                "partial_records": partial_records,
                "empty_records": empty_records,
                "valid_records": complete_records + partial_records,
                "problematic_records": empty_records + duplicate_ids,
                "users_with_surveys": users_with_surveys,
                "users_with_tests": users_with_tests,
                "completed_diagnostics": completed_diagnostics,
                "issues": issues,
                "recommendations": recommendations,
                "warnings": warnings
            }
            
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(None, _analyze)

async def create_database_backup() -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    def _backup():
        import shutil
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = f"backup_before_import_{timestamp}.db"
        
        if os.path.exists("cardio_bot.db"):
            shutil.copy2("cardio_bot.db", backup_path)
            return backup_path
        return None
    
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(None, _backup)

async def perform_database_import(file_path: str) -> dict:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É"""
    def _import():
        import time
        start_time = time.time()
        
        try:
            from database import SessionLocal, User, Survey, TestResult
            
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            df = pd.read_excel(file_path, sheet_name="–í—Å–µ –¥–∞–Ω–Ω—ã–µ" if "–í—Å–µ –¥–∞–Ω–Ω—ã–µ" in pd.ExcelFile(file_path).sheet_names else 0)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            df = df.where(pd.notnull(df), None)  # –ó–∞–º–µ–Ω—è–µ–º NaN –Ω–∞ None
            
            db = SessionLocal()
            
            try:
                imported_users = 0
                imported_surveys = 0
                imported_tests = 0
                updated_records = 0
                created_records = 0
                
                # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                db.query(TestResult).delete()
                db.query(Survey).delete()
                db.query(User).delete()
                db.commit()
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                processed_users = set()
                
                for _, row in df.iterrows():
                    telegram_id = row.get('telegram_id')
                    
                    if pd.isna(telegram_id) or telegram_id in processed_users:
                        continue
                    
                    processed_users.add(telegram_id)
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user = User(
                        telegram_id=int(telegram_id),
                        name=row.get('name') or f"User_{int(telegram_id)}",
                        email=row.get('email') or f"user_{int(telegram_id)}@bot.com",
                        phone=row.get('phone') or f"+{int(telegram_id)}",
                        completed_diagnostic=bool(row.get('completed_diagnostic', False)),
                        registration_completed=bool(row.get('registration_completed', True)),
                        survey_completed=bool(row.get('survey_completed', False)),
                        tests_completed=bool(row.get('tests_completed', False)),
                        created_at=pd.to_datetime(row.get('registration_date', datetime.now())),
                        updated_at=datetime.now(),
                        last_activity=pd.to_datetime(row.get('last_activity', datetime.now()))
                    )
                    db.add(user)
                    imported_users += 1
                    created_records += 1
                
                db.commit()
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–ø—Ä–æ—Å—ã
                for _, row in df.iterrows():
                    telegram_id = row.get('telegram_id')
                    age = row.get('age')
                    
                    if pd.isna(telegram_id) or pd.isna(age):
                        continue
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON –ø–æ–ª–µ–π
                    def safe_json_field(value):
                        if pd.isna(value) or value == '':
                            return None
                        if isinstance(value, str) and (value.startswith('[') or value.startswith('{')):
                            return value
                        return json.dumps([value] if value else [], ensure_ascii=False)
                    
                    survey = Survey(
                        telegram_id=int(telegram_id),
                        age=int(age) if not pd.isna(age) else None,
                        gender=row.get('gender'),
                        location=row.get('location'),
                        education=row.get('education'),
                        family_status=row.get('family_status'),
                        children=row.get('children'),
                        income=row.get('income'),
                        health_rating=int(row.get('health_rating')) if not pd.isna(row.get('health_rating')) else None,
                        death_cause=row.get('death_cause'),
                        heart_disease=row.get('heart_disease'),
                        cv_risk=row.get('cv_risk'),
                        cv_knowledge=row.get('cv_knowledge'),
                        heart_danger=safe_json_field(row.get('heart_danger')),
                        health_importance=row.get('health_importance'),
                        checkup_history=row.get('checkup_history'),
                        checkup_content=safe_json_field(row.get('checkup_content')),
                        prevention_barriers=safe_json_field(row.get('prevention_barriers')),
                        prevention_barriers_other=row.get('prevention_barriers_other'),
                        health_advice=safe_json_field(row.get('health_advice')),
                        created_at=datetime.now(),
                        completed_at=pd.to_datetime(row.get('survey_completed_at', datetime.now()))
                    )
                    db.add(survey)
                    imported_surveys += 1
                    created_records += 1
                
                db.commit()
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
                for _, row in df.iterrows():
                    telegram_id = row.get('telegram_id')
                    hads_score = row.get('hads_anxiety_score')
                    
                    if pd.isna(telegram_id) or pd.isna(hads_score):
                        continue
                    
                    test_result = TestResult(
                        telegram_id=int(telegram_id),
                        hads_anxiety_score=int(hads_score) if not pd.isna(hads_score) else None,
                        hads_depression_score=int(row.get('hads_depression_score')) if not pd.isna(row.get('hads_depression_score')) else None,
                        hads_total_score=int(row.get('hads_total_score')) if not pd.isna(row.get('hads_total_score')) else None,
                        hads_anxiety_level=row.get('hads_anxiety_level'),
                        hads_depression_level=row.get('hads_depression_level'),
                        burns_score=int(row.get('burns_score')) if not pd.isna(row.get('burns_score')) else None,
                        burns_level=row.get('burns_level'),
                        isi_score=int(row.get('isi_score')) if not pd.isna(row.get('isi_score')) else None,
                        isi_level=row.get('isi_level'),
                        stop_bang_score=int(row.get('stop_bang_score')) if not pd.isna(row.get('stop_bang_score')) else None,
                        stop_bang_risk=row.get('stop_bang_risk'),
                        ess_score=int(row.get('ess_score')) if not pd.isna(row.get('ess_score')) else None,
                        ess_level=row.get('ess_level'),
                        fagerstrom_score=int(row.get('fagerstrom_score')) if not pd.isna(row.get('fagerstrom_score')) else None,
                        fagerstrom_level=row.get('fagerstrom_level'),
                        fagerstrom_skipped=bool(row.get('fagerstrom_skipped', False)),
                        audit_score=int(row.get('audit_score')) if not pd.isna(row.get('audit_score')) else None,
                        audit_level=row.get('audit_level'),
                        audit_skipped=bool(row.get('audit_skipped', False)),
                        overall_cv_risk_score=int(row.get('overall_cv_risk_score')) if not pd.isna(row.get('overall_cv_risk_score')) else None,
                        overall_cv_risk_level=row.get('overall_cv_risk_level'),
                        risk_factors_count=int(row.get('risk_factors_count')) if not pd.isna(row.get('risk_factors_count')) else None,
                        created_at=datetime.now(),
                        completed_at=pd.to_datetime(row.get('tests_completed_at', datetime.now()))
                    )
                    db.add(test_result)
                    imported_tests += 1
                    created_records += 1
                
                db.commit()
                
                import_time = time.time() - start_time
                
                return {
                    "success": True,
                    "imported_users": imported_users,
                    "imported_surveys": imported_surveys,
                    "imported_tests": imported_tests,
                    "updated_records": updated_records,
                    "created_records": created_records,
                    "import_time": import_time
                }
                
            except Exception as e:
                db.rollback()
                raise e
            finally:
                db.close()
                
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(None, _import)

# =========================== –ò–°–¢–û–†–ò–Ø –†–ê–°–°–´–õ–û–ö ===========================

@admin_router.callback_query(F.data == "broadcast_history")
async def broadcast_history(callback: CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫"""
    if not await check_admin_auth(callback, state, is_admin):
        return
    
    await callback.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—ã–ª–æ–∫ –∏–∑ –ë–î
        def _get_history():
            from database import BroadcastLog, SessionLocal
            db = SessionLocal()
            try:
                logs = db.query(BroadcastLog).order_by(BroadcastLog.created_at.desc()).limit(10).all()
                return logs
            finally:
                db.close()
        
        loop = asyncio.get_event_loop()
        logs = await loop.run_in_executor(None, _get_history)
        
        if not logs:
            text = """üìä <b>–ò–°–¢–û–†–ò–Ø –†–ê–°–°–´–õ–û–ö</b>

üì≠ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç–∞.

–í—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å."""
        else:
            text = """üìä <b>–ò–°–¢–û–†–ò–Ø –†–ê–°–°–´–õ–û–ö</b>

<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ä–∞—Å—Å—ã–ª–æ–∫:</b>

"""
            
            for i, log in enumerate(logs, 1):
                status = "‚úÖ" if log.sent_count > 0 else "‚ùå"
                date_str = log.created_at.strftime('%d.%m %H:%M')
                success_rate = (log.sent_count / log.total_users * 100) if log.total_users > 0 else 0
                
                text += f"""{status} <b>{i}. {log.broadcast_type}</b>
üìÖ {date_str} | üë• {log.sent_count}/{log.total_users} ({success_rate:.1f}%)
üìù {log.message_text[:50]}{'...' if len(log.message_text) > 50 else ''}

"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="broadcast_history")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_broadcast_menu")]
        ])
        
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

# =========================== –ë–´–°–¢–†–´–ï –ö–û–ú–ê–ù–î–´ ===========================

@admin_router.message(Command("stats"))
async def quick_stats(message: Message, state: FSMContext, is_admin: bool = False):
    """–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    from database import admin_get_stats
    if not is_admin:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        stats = await admin_get_stats()
        
        text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üë• –í—Å–µ–≥–æ: {stats['total_users']}
‚úÖ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É: {stats['completed_diagnostic']}
üìù –ü—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å: {stats['completed_surveys']}
üß™ –ü—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç—ã: {stats['completed_tests']}

üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {stats['completed_diagnostic']/max(stats['total_users'], 1)*100:.1f}%"""
        
        await message.answer(text, parse_mode="HTML")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@admin_router.message(Command("export"))
async def quick_export(message: Message, state: FSMContext, is_admin: bool = False):
    """–ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç"""
    from database import admin_export_data
    if not is_admin:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await message.answer("‚è≥ –°–æ–∑–¥–∞—é —ç–∫—Å–ø–æ—Ä—Ç...")
    
    try:
        filename = await admin_export_data()
        
        if os.path.exists(filename):
            document = FSInputFile(filename)
            await message.answer_document(
                document, 
                caption="üì• –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤"
            )
            os.remove(filename)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞")
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@admin_router.message(Command("broadcast"))
async def quick_broadcast_menu(message: Message, state: FSMContext, is_admin: bool = False):
    """–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—Å—ã–ª–∫–∞–º"""
    from database import admin_get_stats
    if not is_admin:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    admin_session = await state.get_data()
    if not admin_session.get('admin_authenticated'):
        await message.answer("üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å—Å—ã–ª–∫–∞–º –≤–≤–µ–¥–∏—Ç–µ /admin")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫
    try:
        stats = await admin_get_stats()
        
        text = f"""üì§ <b>–ë–´–°–¢–†–´–ï –†–ê–°–°–´–õ–ö–ò</b>

üìä –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë• –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="quick_broadcast_all")],
            [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏–≤—à–∏–º", callback_data="quick_broadcast_completed")],
            [InlineKeyboardButton(text="üìã –†—É—á–Ω–æ–π —Å–ø–∏—Å–æ–∫ ID", callback_data="broadcast_manual_ids")],
            [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç –∞–¥–º–∏–Ω–∞–º", callback_data="broadcast_test")]
        ])
        
        await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@admin_router.callback_query(F.data.startswith("quick_broadcast_"))
async def quick_broadcast_filter(callback: CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not await check_admin_auth(callback, state, is_admin):
        return
    
    await callback.answer()
    
    filter_type = callback.data.replace("quick_broadcast_", "")
    await state.update_data(broadcast_filter=filter_type)
    
    filter_names = {
        "all": "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
        "completed": "–∑–∞–≤–µ—Ä—à–∏–≤—à–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É"
    }
    
    text = f"""‚úçÔ∏è <b>–ë–´–°–¢–†–ê–Ø –†–ê–°–°–´–õ–ö–ê</b>

<b>–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:</b> {filter_names.get(filter_type, filter_type)}

–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:"""
    
    await callback.message.edit_text(text, parse_mode="HTML")
    await state.set_state(AdminStates.waiting_broadcast_text)

# =========================== –°–ü–†–ê–í–ö–ê ===========================

@admin_router.message(Command("adminhelp"))
async def admin_help(message: Message, state: FSMContext, is_admin: bool = False):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω–∫–µ"""
    if not is_admin:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    text = """üîß <b>–ê–î–ú–ò–ù–ö–ê v2.0 - –°–ü–†–ê–í–ö–ê</b>

<b>üéõ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/admin - –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∫–∏
/stats - –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/export - –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –≤ Excel
/broadcast - –ë—ã—Å—Ç—Ä—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
/adminhelp - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>üì§ –°–ò–°–¢–ï–ú–ê –†–ê–°–°–´–õ–û–ö:</b>
‚Ä¢ <b>–ü–æ –ë–î</b> - –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞ –∏–∑ –±–∞–∑—ã
‚Ä¢ <b>–ü–æ ID</b> - —Ä—É—á–Ω–æ–π —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
‚Ä¢ <b>–¢–µ—Å—Ç</b> - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º
‚Ä¢ <b>–ò—Å—Ç–æ—Ä–∏—è</b> - –ª–æ–≥–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫

<b>üíæ –ò–ú–ü–û–†–¢ –ë–ê–ó–´:</b>
‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ Excel —Ñ–∞–π–ª–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞

<b>üìä –≠–ö–°–ü–û–†–¢ –í–ö–õ–Æ–ß–ê–ï–¢:</b>
‚Ä¢ –õ–∏—Å—Ç "–í—Å–µ –¥–∞–Ω–Ω—ã–µ" - –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚Ä¢ –û—Ç–¥–µ–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

<b>üîê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:</b>
‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –ø–∞—Ä–æ–ª—é
‚Ä¢ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ ADMIN_IDS
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±—ç–∫–∞–ø—ã –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

<b>‚ö° –§–ò–õ–¨–¢–†–´ –†–ê–°–°–´–õ–û–ö:</b>
‚Ä¢ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–≤—à–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
‚Ä¢ –ù–µ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
‚Ä¢ –ü—Ä–æ—à–µ–¥—à–∏–µ —Ç–æ–ª—å–∫–æ –æ–ø—Ä–æ—Å
‚Ä¢ –ü—Ä–æ—à–µ–¥—à–∏–µ —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã
‚Ä¢ –†—É—á–Ω–æ–π —Å–ø–∏—Å–æ–∫ ID

<b>üìã –§–û–†–ú–ê–¢ –†–£–ß–ù–´–• ID:</b>
123456789, 987654321, 555444333

<b>üéØ –ü–û–î–î–ï–†–ñ–ö–ê MARKDOWN:</b>
**–∂–∏—Ä–Ω—ã–π**, *–∫—É—Ä—Å–∏–≤*, [—Å—Å—ã–ª–∫–∞](url)

–í—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏–∏."""
    
    await message.answer(text, parse_mode="HTML")

# =========================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–°–°–´–õ–ö–ê–ú–ò –î–õ–Ø –≠–ö–°–¢–†–ï–ù–ù–´–• –°–õ–£–ß–ê–ï–í ===========================

@admin_router.message(Command("emergency_broadcast"))
async def emergency_broadcast(message: Message, state: FSMContext, is_admin: bool = False):
    """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
    if not is_admin:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /emergency_broadcast ID1,ID2,ID3 –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    parts = message.text.split(' ', 2)
    if len(parts) < 3:
        await message.answer("""üö® <b>–≠–ö–°–¢–†–ï–ù–ù–ê–Ø –†–ê–°–°–´–õ–ö–ê</b>

<b>–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:</b>
/emergency_broadcast ID1,ID2,ID3 –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

<b>–ü—Ä–∏–º–µ—Ä:</b>
/emergency_broadcast 123456789,987654321 –í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

<b>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:</b>
‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
‚Ä¢ –ë–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
‚Ä¢ –¢–æ–ª—å–∫–æ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤""", parse_mode="HTML")
        return
    
    ids_str = parts[1]
    message_text = parts[2]
    
    # –ü–∞—Ä—Å–∏–º ID
    try:
        target_ids = []
        for id_str in ids_str.split(','):
            id_str = id_str.strip()
            if id_str.isdigit():
                target_ids.append(int(id_str))
        
        if not target_ids:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID")
            return
        
        await message.answer(f"üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è {len(target_ids)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        result = await send_broadcast_to_ids(message.bot, target_ids, message_text)
        
        result_text = f"""‚úÖ <b>–≠–ö–°–¢–†–ï–ù–ù–ê–Ø –†–ê–°–°–´–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê</b>

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:
‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {result['total']}
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result['sent']}
‚Ä¢ –û—à–∏–±–æ–∫: {result['errors']}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(result['sent']/result['total']*100):.1f}%

üïê {datetime.now().strftime('%H:%M:%S')}"""
        
        await message.answer(result_text, parse_mode="HTML")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

@admin_router.message(Command("db_broadcast"))
async def db_broadcast_command(message: Message, state: FSMContext, is_admin: bool = False):
    """–ë—ã—Å—Ç—Ä–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ –±–∞–∑–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
    if not is_admin:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –§–æ—Ä–º–∞—Ç: /db_broadcast all|completed|uncompleted –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    parts = message.text.split(' ', 2)
    if len(parts) < 3:
        await message.answer("""üì§ <b>–†–ê–°–°–´–õ–ö–ê –ü–û –ë–ê–ó–ï</b>

<b>–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:</b>
/db_broadcast —Ñ–∏–ª—å—Ç—Ä –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b>
‚Ä¢ all - –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚Ä¢ completed - –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
‚Ä¢ uncompleted - –Ω–µ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–º
‚Ä¢ survey - –ø—Ä–æ—à–µ–¥—à–∏–º –æ–ø—Ä–æ—Å
‚Ä¢ tests - –ø—Ä–æ—à–µ–¥—à–∏–º —Ç–µ—Å—Ç—ã

<b>–ü—Ä–∏–º–µ—Ä:</b>
/db_broadcast completed –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏!""", parse_mode="HTML")
        return
    
    filter_type = parts[1]
    message_text = parts[2]
    
    if filter_type not in ['all', 'completed', 'uncompleted', 'survey', 'tests']:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä. –î–æ—Å—Ç—É–ø–Ω—ã: all, completed, uncompleted, survey, tests")
        return
    
    try:
        await message.answer(f"üì§ –í—ã–ø–æ–ª–Ω—è—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ —Ñ–∏–ª—å—Ç—Ä—É '{filter_type}'...")
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        target_ids = await get_user_ids_by_filter(filter_type)
        
        if not target_ids:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        result = await send_broadcast_to_ids(message.bot, target_ids, message_text)
        
        result_text = f"""‚úÖ <b>–†–ê–°–°–´–õ–ö–ê –ü–û –ë–î –ó–ê–í–ï–†–®–ï–ù–ê</b>

<b>–§–∏–ª—å—Ç—Ä:</b> {filter_type}
<b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {result['total']}
<b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {result['sent']}
<b>–û—à–∏–±–æ–∫:</b> {result['errors']}
<b>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</b> {(result['sent']/result['total']*100):.1f}%

üïê {datetime.now().strftime('%H:%M:%S')}"""
        
        await message.answer(result_text, parse_mode="HTML")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –ë–î: {e}")

# =========================== –°–ò–°–¢–ï–ú–ê –†–ï–ó–ï–†–í–ù–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø ===========================

@admin_router.message(Command("backup"))
async def manual_backup(message: Message, state: FSMContext, is_admin: bool = False):
    """–†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞"""
    if not is_admin:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await message.answer("üíæ –°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é...")
    
    try:
        backup_path = await create_database_backup()
        
        if backup_path and os.path.exists(backup_path):
            document = FSInputFile(backup_path)
            await message.answer_document(
                document,
                caption=f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\nüïê {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
            )
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            os.remove(backup_path)
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")

# =========================== –û–¢–õ–ê–î–û–ß–ù–´–ï –ö–û–ú–ê–ù–î–´ ===========================

@admin_router.message(Command("debug_db"))
async def debug_database(message: Message, state: FSMContext, is_admin: bool = False):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    if not is_admin:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        def _debug():
            from database import SessionLocal, User, Survey, TestResult, ActivityLog
            db = SessionLocal()
            try:
                users_count = db.query(User).count()
                surveys_count = db.query(Survey).count()
                tests_count = db.query(TestResult).count()
                logs_count = db.query(ActivityLog).count()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
                users_with_surveys = db.query(User).filter(User.survey_completed == True).count()
                actual_surveys = surveys_count
                
                users_with_tests = db.query(User).filter(User.tests_completed == True).count()
                actual_tests = tests_count
                
                return {
                    'users_count': users_count,
                    'surveys_count': surveys_count,
                    'tests_count': tests_count,
                    'logs_count': logs_count,
                    'users_with_surveys': users_with_surveys,
                    'actual_surveys': actual_surveys,
                    'users_with_tests': users_with_tests,
                    'actual_tests': actual_tests,
                    'db_size': os.path.getsize("cardio_bot.db") / 1024 / 1024 if os.path.exists("cardio_bot.db") else 0
                }
            finally:
                db.close()
        
        loop = asyncio.get_event_loop()
        debug_info = await loop.run_in_executor(None, _debug)
        
        text = f"""üêõ <b>–û–¢–õ–ê–î–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•</b>

<b>üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:</b>
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {debug_info['users_count']}
‚Ä¢ –û–ø—Ä–æ—Å—ã: {debug_info['surveys_count']}
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤: {debug_info['tests_count']}
‚Ä¢ –õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {debug_info['logs_count']}

<b>üîó –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:</b>
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ñ–ª–∞–≥–æ–º –æ–ø—Ä–æ—Å–∞: {debug_info['users_with_surveys']}
‚Ä¢ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø—Ä–æ—Å–æ–≤: {debug_info['actual_surveys']}
‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–ø—Ä–æ—Å–æ–≤: {'‚úÖ' if debug_info['users_with_surveys'] == debug_info['actual_surveys'] else '‚ùå'}

‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ñ–ª–∞–≥–æ–º —Ç–µ—Å—Ç–æ–≤: {debug_info['users_with_tests']}
‚Ä¢ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤: {debug_info['actual_tests']}
‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ—Å—Ç–æ–≤: {'‚úÖ' if debug_info['users_with_tests'] == debug_info['actual_tests'] else '‚ùå'}

<b>üíæ –†–∞–∑–º–µ—Ä –ë–î:</b> {debug_info['db_size']:.2f} –ú–ë

<b>üìÅ –§–∞–π–ª –ë–î:</b> {'‚úÖ' if os.path.exists("cardio_bot.db") else '‚ùå'} cardio_bot.db"""
        
        await message.answer(text, parse_mode="HTML")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")

@admin_router.callback_query(F.data == "admin_export")
async def export_data(callback: CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
    from database import admin_export_data

    if not await check_admin_auth(callback, state, is_admin):
        return
    
    await callback.answer()
    await callback.message.edit_text("‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —ç–∫—Å–ø–æ—Ä—Ç...")
    
    try:
        filename = await admin_export_data()
        
        if os.path.exists(filename):
            document = FSInputFile(filename)
            await callback.message.answer_document(
                document, 
                caption="üì• –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤"
            )
            os.remove(filename)
            await show_admin_panel(callback.message)
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞")
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@admin_router.callback_query(F.data == "admin_clean")
async def clean_data_menu(callback: CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–ú–µ–Ω—é –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    if not await check_admin_auth(callback, state, is_admin):
        return
    
    await callback.answer()
    
    text = """üóë <b>–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö</b>

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.

–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:
‚Ä¢ –°—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –°—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ —Ä–∞—Å—Å—ã–ª–æ–∫
‚Ä¢ –£—Å—Ç–∞—Ä–µ–≤—à–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

<b>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Å—Ç–∞—é—Ç—Å—è –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º–∏!</b>"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóë 30 –¥–Ω–µ–π", callback_data="clean_30")],
        [InlineKeyboardButton(text="üóë 60 –¥–Ω–µ–π", callback_data="clean_60")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)

@admin_router.callback_query(F.data.startswith("clean_"))
async def clean_old_data_action(callback: CallbackQuery, state: FSMContext, is_admin: bool = False):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    from database import clean_old_data
    if not await check_admin_auth(callback, state, is_admin):
        return
    
    await callback.answer()
    
    days = int(callback.data.split("_")[1])
    await callback.message.edit_text(f"‚è≥ –£–¥–∞–ª—è—é –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π...")
    
    try:
        def _clean():
            return clean_old_data(days)
        
        loop = asyncio.get_event_loop()
        result = await loop.run_in_executor(None, _clean)
        
        text = f"""‚úÖ <b>–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>

–£–¥–∞–ª–µ–Ω–æ –∑–∞ {days} –¥–Ω–µ–π:
‚Ä¢ –õ–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {result.get('deleted_activity_logs', 0)}
‚Ä¢ –õ–æ–≥–æ–≤ —Ä–∞—Å—Å—ã–ª–æ–∫: {result.get('deleted_broadcast_logs', 0)}
‚Ä¢ –°–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {result.get('deleted_system_stats', 0)}

üíæ –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")